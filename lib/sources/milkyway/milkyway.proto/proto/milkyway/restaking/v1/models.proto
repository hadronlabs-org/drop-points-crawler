syntax = "proto3";
package milkyway.restaking.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/milkyway-labs/milkyway/v2/x/restaking/types";

// DelegationType defines the type of delegation.
enum DelegationType {
  option (gogoproto.goproto_enum_prefix) = false;

  DELEGATION_TYPE_UNSPECIFIED = 0;
  DELEGATION_TYPE_POOL = 1;
  DELEGATION_TYPE_OPERATOR = 2;
  DELEGATION_TYPE_SERVICE = 3;
}

// Delegation represents the bond with tokens held by an account with a
// given target.
message Delegation {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Type is the type of delegation.
  DelegationType type = 1;

  // UserAddress is the encoded address of the user.
  string user_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // TargetID is the id of the target to which the delegation is associated
  // (pool, operator, service).
  uint32 target_id = 3 [ (gogoproto.customname) = "TargetID" ];

  // Shares define the delegation shares received.
  repeated cosmos.base.v1beta1.DecCoin shares = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
}

// DelegationResponse is equivalent to Delegation except that it
// contains a balance in addition to shares which is more suitable for client
// responses.
message DelegationResponse {
  option (gogoproto.equal) = false;

  Delegation delegation = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  repeated cosmos.base.v1beta1.Coin balance = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// --------------------------------------------------------------------------------------------------------------------

// UnbondingDelegation stores all of a single delegator's unbonding bonds
// for a single target in an time-ordered list.
message UnbondingDelegation {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Type is the type of the unbonding delegation.
  DelegationType type = 1;

  // DelegatorAddress is the encoded address of the delegator.
  string delegator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // TargetID is the ID of the target from which the tokens will be undelegated
  // (pool, service, operator)
  uint32 target_id = 3 [ (gogoproto.customname) = "TargetID" ];

  // Entries are the unbonding delegation entries.
  repeated UnbondingDelegationEntry entries = 4 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ]; // unbonding delegation entries
}

// UnbondingDelegationEntry defines an unbonding object with relevant metadata.
message UnbondingDelegationEntry {
  option (gogoproto.equal) = true;

  // CreationHeight is the height which the unbonding took place.
  int64 creation_height = 1;

  // CompletionTime is the unix time for unbonding completion.
  google.protobuf.Timestamp completion_time = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdtime) = true
  ];

  // InitialBalance defines the tokens initially scheduled to receive at
  // completion.
  repeated cosmos.base.v1beta1.Coin initial_balance = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];

  // Balance defines the tokens to receive at completion.
  repeated cosmos.base.v1beta1.Coin balance = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];

  // Incrementing id that uniquely identifies this entry
  uint64 unbonding_id = 5 [ (gogoproto.customname) = "UnbondingID" ];
}

// --------------------------------------------------------------------------------------------------------------------

// DTData is a struct that contains the basic information about an unbonding
// delegation. It is intended to be used as a marshalable pointer. For example,
// a DTData can be used to construct the key to getting an UnbondingDelegation
// from state.
message DTData {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  DelegationType unbonding_delegation_type = 1;
  string delegator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint32 target_id = 3 [ (gogoproto.customname) = "TargetID" ];
}

// DTDataList defines an array of DTData objects.
message DTDataList {
  repeated DTData data = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// --------------------------------------------------------------------------------------------------------------------

// UserPreferences is a struct that contains a user's preferences for
// restaking.
message UserPreferences {
  // TrustNonAccreditedServices tells whether the user trusts all non-accredited
  // services present on the platform.
  bool trust_non_accredited_services = 1;

  // TrustAccreditedServices tells whether the user trusts all accredited
  // services present on the platform.
  bool trust_accredited_services = 2;

  // TrustedServicesIDs is a list of service IDs that the user trusts (both
  // accredited and non-accredited).
  repeated uint32 trusted_services_ids = 3
      [ (gogoproto.customname) = "TrustedServicesIDs" ];
}