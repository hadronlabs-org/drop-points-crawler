syntax = "proto3";
package milkyway.services.v1;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "milkyway/services/v1/params.proto";
import "milkyway/services/v1/models.proto";

option go_package = "github.com/milkyway-labs/milkyway/v2/x/services/types";

// Msg defines the services module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateService defines the operation for registering a new service.
  rpc CreateService(MsgCreateService) returns (MsgCreateServiceResponse);

  // UpdateService defines the operation for updating an existing service.
  rpc UpdateService(MsgUpdateService) returns (MsgUpdateServiceResponse);

  // ActivateService defines the operation for activating an existing
  // service.
  rpc ActivateService(MsgActivateService) returns (MsgActivateServiceResponse);

  // DeactivateService defines the operation for deactivating an existing
  // service.
  rpc DeactivateService(MsgDeactivateService)
      returns (MsgDeactivateServiceResponse);

  // DeleteService defines the operation for deleting an existing service
  // that has been deactivated.
  rpc DeleteService(MsgDeleteService) returns (MsgDeleteServiceResponse);

  // TransferServiceOwnership defines the operation for transferring the
  // ownership of a service to another account.
  rpc TransferServiceOwnership(MsgTransferServiceOwnership)
      returns (MsgTransferServiceOwnershipResponse);

  // SetServiceParams defines the operation for setting a service's
  // parameters.
  rpc SetServiceParams(MsgSetServiceParams)
      returns (MsgSetServiceParamsResponse);

  // UpdateParams defines a (governance) operation for updating the module
  // parameters.
  // The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // AccreditService defines a (governance) operation for accrediting a service.
  // Since: v1.4.0
  rpc AccreditService(MsgAccreditService) returns (MsgAccreditServiceResponse);

  // RevokeServiceAccreditation defines a (governance) operation for revoking a
  // service's accreditation. Since: v1.4.0
  rpc RevokeServiceAccreditation(MsgRevokeServiceAccreditation)
      returns (MsgRevokeServiceAccreditationResponse);
}

// MsgCreateServiceResponse defines the message structure for the
// CreateService gRPC service method. It allows an account to register a new
// service that can be validated by operators. It requires a sender address
// as well as the details of the service to be registered.
message MsgCreateService {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/services/MsgCreateService";

  // Sender is the address of the user registering the service
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Name is the name of the service
  string name = 2 [ (gogoproto.moretags) = "yaml:\"name\"" ];

  // Description is the description of the service
  string description = 3 [ (gogoproto.moretags) = "yaml:\"description\"" ];

  // Website is the website of the service
  string website = 4 [ (gogoproto.moretags) = "yaml:\"website\"" ];

  // PictureURL is the URL of the service picture
  string picture_url = 5 [
    (gogoproto.moretags) = "yaml:\"picture_url\"",
    (gogoproto.customname) = "PictureURL"
  ];

  // FeeAmount represents the fees that are going to be paid to create the
  // service. These should always be greater or equals of any of the coins
  // specified inside the ServiceRegistrationFee field of the modules params.
  // If no fees are specified inside the module parameters, this field can be
  // omitted.
  repeated cosmos.base.v1beta1.Coin fee_amount = 6 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// MsgCreateServiceResponse is the return value of MsgCreateService.
// It returns the newly created service ID.
message MsgCreateServiceResponse {
  // NewServiceID is the ID of the newly registered service
  uint32 new_service_id = 1 [ (gogoproto.customname) = "NewServiceID" ];
}

// MsgUpdateService defines the message structure for the UpdateService gRPC
// service method. It allows the service admin to update the details of
// an existing service.
message MsgUpdateService {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/services/MsgUpdateService";

  // Sender is the address of the user updating the service
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // ID represents the ID of the service to be updated
  uint32 service_id = 2 [ (gogoproto.customname) = "ServiceID" ];

  // Name is the new name of the service.
  // If it shouldn't be changed, use [do-not-modify] instead.
  string name = 3 [ (gogoproto.moretags) = "yaml:\"name\"" ];

  // Description is the new description of the service.
  // If it shouldn't be changed, use [do-not-modify] instead.
  string description = 4 [ (gogoproto.moretags) = "yaml:\"description\"" ];

  // Website is the new website of the service.
  // If it shouldn't be changed, use [do-not-modify] instead.
  string website = 5 [ (gogoproto.moretags) = "yaml:\"website\"" ];

  // PictureURL is the new URL of the service picture.
  // If it shouldn't be changed, use [do-not-modify] instead.
  string picture_url = 6 [
    (gogoproto.moretags) = "yaml:\"picture_url\"",
    (gogoproto.customname) = "PictureURL"
  ];
}

// MsgUpdateServiceResponse is the return value of MsgUpdateService.
message MsgUpdateServiceResponse {}

// MsgActivateService defines the message structure for the ActivateService gRPC
message MsgActivateService {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgActivateService";

  // Sender is the address of the user that wants to activate the service
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // ServiceID represents the ID of the service to be activated
  uint32 service_id = 2 [ (gogoproto.customname) = "ServiceID" ];
}

// MsgActivateServiceResponse is the return value of MsgActivateService.
message MsgActivateServiceResponse {}

// MsgDeactivateService defines the message structure for the DeactivateService
// gRPC service method. It allows the service admin to deactivate an existing
// service.
message MsgDeactivateService {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgDeactivateService";

  // Sender is the address of the user that wants to deactivate the service
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // ServiceID represents the ID of the service to be deactivated
  uint32 service_id = 2 [ (gogoproto.customname) = "ServiceID" ];
}

// MsgDeactivateServiceResponse is the return value of MsgDeactivateService.
message MsgDeactivateServiceResponse {}

// MsgDeleteService defines the message structure for the DeleteService
// gRPC service method. It allows the service admin to delete a previously
// deactivated service
message MsgDeleteService {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgDeleteService";

  // Sender is the address of the user that wants to delete the service
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // ServiceID represents the ID of the service to be deleted
  uint32 service_id = 2 [ (gogoproto.customname) = "ServiceID" ];
}

// MsgDeleteServiceResponse is the return value of MsgDeleteService.
message MsgDeleteServiceResponse {}

// MsgTransferServiceOwnership defines the message structure for the
// TransferServiceOwnership gRPC service method. It allows a service admin to
// transfer the ownership of the service to another account.
message MsgTransferServiceOwnership {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgTransferServiceOwnership";

  // Sender is the address of the user transferring the ownership
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // ServiceID represents the ID of the service to transfer ownership
  uint32 service_id = 2 [ (gogoproto.customname) = "ServiceID" ];

  // NewAdmin is the address of the new admin of the service
  string new_admin = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgTransferServiceOwnershipResponse is the return value of
// MsgTransferServiceOwnership.
message MsgTransferServiceOwnershipResponse {}

// MsgSetServiceParams defines the message structure for the
// SetServiceParams gRPC service method. It allows a service admin to
// update the parameters of a service.
message MsgSetServiceParams {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgSetServiceParams";

  // Sender is the address of the user setting the parameters
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // ServiceID is the ID of the service whose parameters are being set
  uint32 service_id = 2 [ (gogoproto.customname) = "ServiceID" ];

  // ServiceParams defines the new parameters of the service
  ServiceParams service_params = 3 [ (gogoproto.nullable) = false ];
}

// MsgSetServiceParamsResponse is the return value of MsgSetServiceParams.
message MsgSetServiceParamsResponse {}

// MsgDeactivateService defines the message structure for the UpdateParams gRPC
// service method. It allows the authority to update the module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "milkyway/services/MsgUpdateParams";

  // Authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [
    (gogoproto.moretags) = "yaml:\"authority\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Params define the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgDeactivateServiceResponse is the return value of MsgUpdateParams.
message MsgUpdateParamsResponse {}

// MsgAccreditService defines the message structure for the AccreditService gRPC
// service method. It allows the authority to accredit a service.
message MsgAccreditService {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "milkyway/MsgAccreditService";

  // Authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [
    (gogoproto.moretags) = "yaml:\"authority\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // ServiceID represents the ID of the service to be accredited
  uint32 service_id = 2 [ (gogoproto.customname) = "ServiceID" ];
}

// MsgAccreditServiceResponse is the return value of MsgAccreditService.
message MsgAccreditServiceResponse {}

// MsgRevokeServiceAccreditation defines the message structure for the
// RevokeServiceAccreditation gRPC service method. It allows the authority to
// revoke a service's accreditation.
message MsgRevokeServiceAccreditation {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "milkyway/MsgRevokeServiceAccreditation";

  // Authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [
    (gogoproto.moretags) = "yaml:\"authority\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // ServiceID represents the ID of the service to have its accreditation
  // revoked
  uint32 service_id = 2 [ (gogoproto.customname) = "ServiceID" ];
}

// MsgRevokeServiceAccreditationResponse is the return value of
// MsgRevokeServiceAccreditation.
message MsgRevokeServiceAccreditationResponse {}
