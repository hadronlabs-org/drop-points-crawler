syntax = "proto3";
package milkyway.operators.v1;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "milkyway/operators/v1/params.proto";
import "milkyway/operators/v1/models.proto";

option go_package = "github.com/milkyway-labs/milkyway/v2/x/operators/types";

// Msg defines the avs module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // RegisterOperator defines the operation for registering a new operator.
  rpc RegisterOperator(MsgRegisterOperator)
      returns (MsgRegisterOperatorResponse);

  // UpdateOperator defines the operation for updating an operator's details.
  // The operator owner can update the moniker, website, and picture URL.
  rpc UpdateOperator(MsgUpdateOperator) returns (MsgUpdateOperatorResponse);

  // DeactivateOperator defines the operation for deactivating an
  // operator. Operators will require some time in order to be deactivated.
  // This time is defined by the governance parameters.
  rpc DeactivateOperator(MsgDeactivateOperator)
      returns (MsgDeactivateOperatorResponse);

  // ReactivateOperator defines the operation for reactivating an
  // inactive operator.
  rpc ReactivateOperator(MsgReactivateOperator)
      returns (MsgReactivateOperatorResponse);

  // DeleteOperator defines the operation for deleting a deactivated operator.
  rpc DeleteOperator(MsgDeleteOperator) returns (MsgDeleteOperatorResponse);

  // TransferOperatorOwnership defines the operation for transferring the
  // ownership of an operator to another account.
  rpc TransferOperatorOwnership(MsgTransferOperatorOwnership)
      returns (MsgTransferOperatorOwnershipResponse);

  // SetOperatorParams defines the operation for setting a operator's
  // parameters.
  rpc SetOperatorParams(MsgSetOperatorParams)
      returns (MsgSetOperatorParamsResponse);

  // UpdateParams defines a governance operation for updating the module
  // parameters.
  // The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterOperator defines the message structure for the RegisterOperator
// gRPC service method. It allows an account to register a new operator that can
// opt-in to validate various services. It requires a sender address as well as
// the details of the operator to be registered.
message MsgRegisterOperator {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgRegisterOperator";

  // Sender is the address of the user registering the operator
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Moniker is the moniker of the operator
  string moniker = 2 [ (gogoproto.moretags) = "yaml:\"moniker\"" ];

  // Website is the website of the operator (optional)
  string website = 3 [ (gogoproto.moretags) = "yaml:\"website\"" ];

  // PictureURL is the URL of operator picture (optional)
  string picture_url = 4 [
    (gogoproto.moretags) = "yaml:\"picture_url\"",
    (gogoproto.customname) = "PictureURL"
  ];

  // FeeAmount represents the fees that are going to be paid to create the
  // operator. These should always be greater or equals of any of the coins
  // specified inside the OperatorRegistrationFee field of the modules params.
  // If no fees are specified inside the module parameters, this field can be
  // omitted.
  repeated cosmos.base.v1beta1.Coin fee_amount = 5 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// MsgRegisterOperatorResponse is the return value of MsgRegisterOperator.
// It returns the newly created operator ID.
message MsgRegisterOperatorResponse {
  // NewOperatorID is the ID of the newly registered operator
  uint32 new_operator_id = 1 [ (gogoproto.customname) = "NewOperatorID" ];
}

// MsgUpdateOperator defines the message structure for the UpdateOperator gRPC
// service method. It allows the operator owner to update the details of an
// existing operator.
message MsgUpdateOperator {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgUpdateOperator";

  // Sender is the address of the user updating the operator
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // OperatorID represents the ID of the operator to be updated
  uint32 operator_id = 2 [ (gogoproto.customname) = "OperatorID" ];

  // Moniker is the new moniker of the operator.
  // If it shouldn't be changed, use [do-not-modify] instead.
  string moniker = 3 [ (gogoproto.moretags) = "yaml:\"name\"" ];

  // Website is the new website of the operator.
  // If it shouldn't be changed, use [do-not-modify] instead.
  string website = 4 [ (gogoproto.moretags) = "yaml:\"website\"" ];

  // PictureURL is the new URL of the operator picture.
  // If it shouldn't be changed, use [do-not-modify] instead.
  string picture_url = 5 [
    (gogoproto.moretags) = "yaml:\"picture_url\"",
    (gogoproto.customname) = "PictureURL"
  ];
}

// MsgUpdateOperatorResponse is the return value of MsgUpdateOperator.
message MsgUpdateOperatorResponse {}

// MsgDeactivateOperator defines the message structure for the
// DeactivateOperator gRPC service method. It allows the operator owner to
// signal that the operator will become inactive. This should be used to signal
// users that the operator is going to stop performing services and they should
// switch to another operator.
message MsgDeactivateOperator {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgDeactivateOperator";

  // Sender is the address of the user deactivating the operator
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // OperatorID represents the ID of the operator to be deregistered
  uint32 operator_id = 2 [ (gogoproto.customname) = "OperatorID" ];
}

// MsgDeactivateOperatorResponse is the return value of MsgDeactivateOperator.
message MsgDeactivateOperatorResponse {}

// MsgReactivateOperator defines the message structure for the
// ReactivateOperator gRPC service method. It allows the operator owner to
// reactivate an inactive operator.
message MsgReactivateOperator {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgReactivateOperator";

  // Sender is the address of the user reactivating the operator
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // OperatorID represents the ID of the operator to be reactivated
  uint32 operator_id = 2 [ (gogoproto.customname) = "OperatorID" ];
}

// MsgReactivateOperatorResponse is the return value of MsgReactivateOperator.
message MsgReactivateOperatorResponse {}

// MsgDeleteOperator defines the message structure for the
// DeleteOperator gRPC service method. It allows the operator owner to
// delete a deactivated operator.
message MsgDeleteOperator {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgDeleteOperator";

  // Sender is the address of the user deleting the operator
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // OperatorID represents the ID of the operator to be deleted
  uint32 operator_id = 2 [ (gogoproto.customname) = "OperatorID" ];
}

// MsgDeleteOperatorResponse is the return value of MsgDeleteOperator.
message MsgDeleteOperatorResponse {}

// MsgSetOperatorParams defines the message structure for the
// SetOperatorParams gRPC service method. It allows the operator admin to
// update the operator's parameters.
message MsgSetOperatorParams {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgSetOperatorParams";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  uint32 operator_id = 2 [ (gogoproto.customname) = "OperatorID" ];

  OperatorParams params = 3 [ (gogoproto.nullable) = false ];
}

// MsgSetOperatorParamsResponse is the return value of
// MsgSetOperatorParams.
message MsgSetOperatorParamsResponse {}

// MsgTransferOperatorOwnership defines the message structure for the
// TransferOperatorOwnership gRPC service method. It allows an operator admin to
// transfer the ownership of the operator to another account.
message MsgTransferOperatorOwnership {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgTransferOperatorOwnership";

  // Sender is the address of the user transferring the ownership
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // OperatorID represents the ID of the operator to transfer ownership
  uint32 operator_id = 2 [ (gogoproto.customname) = "OperatorID" ];

  // NewAdmin is the address of the new admin of the operator
  string new_admin = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgTransferOperatorOwnershipResponse is the return value of
// MsgTransferOperatorOwnership.
message MsgTransferOperatorOwnershipResponse {}

// MsgUpdateParams defines the message structure for the UpdateParams gRPC
// service method. It allows the authority to update the module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "milkyway/operators/MsgUpdateParams";

  // Authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [
    (gogoproto.moretags) = "yaml:\"authority\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Params define the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse is the return value of MsgUpdateParams.
message MsgUpdateParamsResponse {}
