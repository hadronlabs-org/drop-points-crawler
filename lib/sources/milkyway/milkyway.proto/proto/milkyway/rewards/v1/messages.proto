syntax = "proto3";
package milkyway.rewards.v1;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";
import "milkyway/restaking/v1/models.proto";
import "milkyway/rewards/v1/params.proto";
import "milkyway/rewards/v1/models.proto";

option go_package = "github.com/milkyway-labs/milkyway/v2/x/rewards/types";

// Msg defines the services module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateRewardsPlan defines the operation for creating a new
  // rewards plan.
  rpc CreateRewardsPlan(MsgCreateRewardsPlan)
      returns (MsgCreateRewardsPlanResponse);

  // EditRewardsPlan defines the operation to edit an existing
  // rewards plan.
  rpc EditRewardsPlan(MsgEditRewardsPlan) returns (MsgEditRewardsPlanResponse);

  // SetWithdrawAddress defines a method to change the withdraw address
  // for a delegator(or an operator, when withdrawing commission).
  rpc SetWithdrawAddress(MsgSetWithdrawAddress)
      returns (MsgSetWithdrawAddressResponse);

  // WithdrawDelegatorReward defines a method to withdraw rewards of delegator
  // from a single delegation target.
  rpc WithdrawDelegatorReward(MsgWithdrawDelegatorReward)
      returns (MsgWithdrawDelegatorRewardResponse);

  // WithdrawOperatorCommission defines a method to withdraw the
  // full commission to the operator.
  rpc WithdrawOperatorCommission(MsgWithdrawOperatorCommission)
      returns (MsgWithdrawOperatorCommissionResponse);

  // UpdateParams defines a (governance) operation for updating the module
  // parameters.
  // The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateRewardsPlan defines the message structure for the
// CreateRewardsPlan gRPC service method. It allows an account to create a
// new rewards plan. It requires a sender address as well as the details of
// the plan to be created.
message MsgCreateRewardsPlan {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgCreateRewardsPlan";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Sender is the address of the user creating the rewards plan
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string description = 2;

  uint32 service_id = 3 [ (gogoproto.customname) = "ServiceID" ];

  // Amount is the amount of rewards to be distributed.
  repeated cosmos.base.v1beta1.Coin amount = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];

  // StartTime is the starting time of the plan.
  google.protobuf.Timestamp start_time = 5
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // EndTime is the ending time of the plan.
  google.protobuf.Timestamp end_time = 6
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // PoolsDistribution is the rewards distribution parameters for pools.
  Distribution pools_distribution = 7 [ (gogoproto.nullable) = false ];

  // OperatorsDistribution is the rewards distribution parameters for operators.
  Distribution operators_distribution = 8 [ (gogoproto.nullable) = false ];

  // UsersDistribution is the rewards distribution parameters for users who
  // delegated directly to the service.
  UsersDistribution users_distribution = 9 [ (gogoproto.nullable) = false ];

  // FeeAmount represents the fees that are going to be paid to create the
  // rewards plan. These should always be greater or equals of any of the coins
  // specified inside the RewardsPlanCreationFee field of the modules params.
  // If no fees are specified inside the module parameters, this field can be
  // omitted.
  repeated cosmos.base.v1beta1.Coin fee_amount = 10 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// MsgCreateRewardsPlanResponse is the return value of
// MsgCreateRewardsPlan. It returns the newly created plan ID.
message MsgCreateRewardsPlanResponse {
  // NewRewardsPlanID is the ID of the newly created rewards plan
  uint64 new_rewards_plan_id = 1
      [ (gogoproto.customname) = "NewRewardsPlanID" ];
}

// MsgEditRewardsPlan defines the message structure for the
// EditRewardsPlan gRPC service method. It allows an account to edit a
// previously created rewards plan.
message MsgEditRewardsPlan {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgEditRewardsPlan";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Sender is the address of the user editing the rewards plan.
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // ID is the ID of the rewards plan to be edited.
  uint64 id = 2 [ (gogoproto.customname) = "ID" ];

  string description = 3;

  // Amount is the amount of rewards to be distributed.
  repeated cosmos.base.v1beta1.Coin amount = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];

  // StartTime is the starting time of the plan.
  google.protobuf.Timestamp start_time = 5
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // EndTime is the ending time of the plan.
  google.protobuf.Timestamp end_time = 6
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // PoolsDistribution is the rewards distribution parameters for pools.
  Distribution pools_distribution = 7 [ (gogoproto.nullable) = false ];

  // OperatorsDistribution is the rewards distribution parameters for operators.
  Distribution operators_distribution = 8 [ (gogoproto.nullable) = false ];

  // UsersDistribution is the rewards distribution parameters for users who
  // delegated directly to the service.
  UsersDistribution users_distribution = 9 [ (gogoproto.nullable) = false ];
}

// MsgEditRewardsPlanResponse is the return value of
// MsgEditRewardsPlan.
message MsgEditRewardsPlanResponse {}

// MsgSetWithdrawAddress sets the withdraw address for a delegator(or an
// operator when withdrawing commission).
message MsgSetWithdrawAddress {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgSetWithdrawAddress";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string withdraw_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response
// type.
message MsgSetWithdrawAddressResponse {}

// MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
// from a single delegation target.
message MsgWithdrawDelegatorReward {
  option (cosmos.msg.v1.signer) = "delegator_address";
  option (amino.name) = "milkyway/MsgWithdrawDelegatorReward";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string delegator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  milkyway.restaking.v1.DelegationType delegation_type = 2;

  uint32 delegation_target_id = 3
      [ (gogoproto.customname) = "DelegationTargetID" ];
}

// MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward
// response type.
message MsgWithdrawDelegatorRewardResponse {
  repeated cosmos.base.v1beta1.Coin amount = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgWithdrawOperatorCommission withdraws the full commission to the operator.
message MsgWithdrawOperatorCommission {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgWithdrawOperatorCommission";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  uint32 operator_id = 2 [ (gogoproto.customname) = "OperatorID" ];
}

// MsgWithdrawOperatorCommissionResponse defines the
// Msg/WithdrawOperatorCommission response type.
message MsgWithdrawOperatorCommissionResponse {
  // Since: cosmos-sdk 0.46
  repeated cosmos.base.v1beta1.Coin amount = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (amino.encoding) = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgUpdateParams defines the message structure for the UpdateParams gRPC
// service method. It allows the authority to update the module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "milkyway/rewards/MsgUpdateParams";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Params define the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse is the return value of MsgUpdateParams.
message MsgUpdateParamsResponse {}
